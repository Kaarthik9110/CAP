 Recover Binary Search Tree

You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

Example 1:


Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.


class Solution {
    List<Integer>list=new ArrayList<>();
    int i=0;
    public void recoverTree(TreeNode root) {
        recover(root);
        Collections.sort(list);
        sorted(root);

    }
    public void recover(TreeNode root){
        if(root==null){
            return ;
        }
        recover(root.left);
        list.add(root.val);
        recover(root.right);
    }
    public void sorted(TreeNode root){
        if(root==null){
            return ;
              }
        if(root!=null){
            sorted(root.left);
            if(root.val!=list.get(i)){
                root.val=list.get(i);
            } i++;
            sorted(root.right);
           
        }
    }
}
