4 SUM
Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>>list=new ArrayList<>();
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++){
            if(i==0||i>0 && nums[i-1]!=nums[i]){
                for(int j=i+1;j<nums.length;j++){
                     if(j==i+1||j>0 && (long)nums[j-1]!=(long)nums[j]){
                int l=j+1; int h=nums.length-1;
                while(l<h){
                long sum=(long)nums[i]+(long)nums[j]+(long)nums[l]+(long)nums[h];
                if(sum<target){
                    l++;
                }
                else if(sum>target){
                    h--;
                }
                else{
                    List<Integer>list1=new ArrayList<>();
                    list1.add(nums[i]);
                    list1.add(nums[j]);
                    list1.add(nums[l]);
                    list1.add(nums[h]);
                    list.add(list1);
                
                while(l<h && (long)nums[l]==(long)nums[l+1]){
                    l++;
                        }
                while(l<h && (long)nums[h]==(long)nums[h-1]){
                    h--;
                    }
                l++;
                h--;

                    }
                }
            }
       }
    }
        }
    
    return list;
    }
}


or


class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>>list=new ArrayList<>();
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++){
            if(i==0||i>0 && nums[i-1]!=nums[i]){
                for(int j=i+1;j<nums.length;j++){
                    if(j==i+1||j>i+1 && nums[j-1]!=nums[j]){
                        int l=j+1; int h=nums.length-1;
                        long sum=target-(long)nums[i]-nums[j];
                        while(l<h){
                            if((long)nums[l]+nums[h]<sum){
                                l++;
                            }
                            else if((long)nums[l]+nums[h]>sum){
                                h--;
                            }
                            else{
                                 List<Integer>list1=new ArrayList<>();
                                 list1.add(nums[i]);
                                 list1.add(nums[j]);
                                 list1.add(nums[l]);
                                 list1.add(nums[h]);
                                 list.add(list1);
                
                                while(l<h && nums[l]==nums[l+1]){
                                         l++;
                                }
                               while(l<h && nums[h]==nums[h-1]){
                                             h--;
                                }
                                l++;
                                h--;

                             }
                         }
                    }
                 }
            }
        }
        return list;
    }
}
