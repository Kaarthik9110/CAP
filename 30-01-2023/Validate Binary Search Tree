Validate Bianry Search Tree

Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left 
subtree
 of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [2,1,3]
Output: true

class Solution {
    List<Integer>list=new ArrayList<>();
      int c=0;
     public boolean isValidBST(TreeNode root) {
       
         
         if(root==null){
             return false;
         }
         valid(root);
         if(list.size()==1){
             return true;
         }
         int size=list.size();
         for(int i=0;i<size-1;i++){
             if(list.get(i)==list.get(i+1)){
                 c+=1;
             }
             }
             if(c==size-1){
                 return false;
             }
             for(int i=0;i<size-1;i++){
                if(list.get(i)>=list.get(i+1)){
                 return false;
             }
             }
             return true;
             }
             
     
        
        public void valid(TreeNode root){
            if(root==null){
                return;
            }
            valid(root.left);
            list.add(root.val);
            valid(root.right);
        }
 
}

or

class Solution {
     public boolean isValidBST(TreeNode root) {
        return isValid(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }

    public boolean isValid(TreeNode root, long min, long max) {
        if (root == null) return true;
        if (root.val >= max || root.val <= min) return false;

        return isValid(root.left, min, root.val) && isValid(root.right, root.val, max);
    }
}
  
