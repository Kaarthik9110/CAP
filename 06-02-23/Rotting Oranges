994. Rotting Oranges
You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.
Example 1:
Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4


class Pair{
    int row;
    int col;
    Pair(int row,int col){
        this.row=row;
        this.col=col;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        int t=0;
        int c1=0;
        Queue<Pair>q=new LinkedList<>();
        int m=grid.length;
        int n=grid[0].length;
        int x[]={-1,0,1,0};
        int y[]={0,1,0,-1};
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    q.add(new Pair(i,j));
                }
            }
        }
        while(!q.isEmpty()){
            int size=q.size();
            int k=0;
            for(int i=0;i<size;i++){
            Pair p=q.poll();
            int a=p.row;
            int b=p.col;
            for(int j=0;j<4;j++){
                int r=a+x[j];
                int c=b+y[j];
                if(r>=0 && c>=0 && r<m &&c<n){
                if(grid[r][c]==1){
                    grid[r][c]=2;
                    k=1;
                    q.add(new Pair(r,c));
                }
                }
                else{
                    continue;
                 }
            }
        }
        if(k==1){
            t++;
        }
    }
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(grid[i][j]==1){
                c1=1;
            }
        }
    }
    if(c1==1){
        return -1;
    }
    else{
        return t;
    }
    }
}
