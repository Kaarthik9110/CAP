Range Sum of BST
Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].
Example 1:
Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32
Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.

class Solution {
    int c=0;
    public int rangeSumBST(TreeNode root, int low, int high) {
        rangesum(root,low,high);
        return c;
    }
    public void rangesum(TreeNode root,int low,int high){
        if(root==null){
            return;
        }
        if(root!=null){
            if(root.val>=low&&root.val<=high){
                c=c+root.val;
            }
        }
        rangesum(root.left,low,high);
        rangesum(root.right,low,high);
    }
}



or



class Solution {
    List<Integer>list=new ArrayList<>();
    int c=0;
    public int rangeSumBST(TreeNode root, int low, int high) {
        rangesum(root,low,high);
        int size=list.size();
        for(int i=0;i<size;i++){
            if(list.get(i)>=low && list.get(i)<=high){
                c=c+list.get(i);
            }
        }
        return c;
    }
    public void rangesum(TreeNode root,int low,int high){
        if(root==null){
            return;
        }
        rangesum(root.left,low,high);
        list.add(root.val);
        rangesum(root.right,low,high);
    }
}
